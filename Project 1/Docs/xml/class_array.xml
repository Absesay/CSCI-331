<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_array" kind="class" language="C++" prot="public">
    <compoundname>Array</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_array_1aed1d2943c52e2503817744cbace2d805" prot="private" static="no" mutable="no">
        <type>int *</type>
        <definition>int* Array::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="1array.h" line="114" column="8" bodyfile="1array.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_array_1a8780e83e6e49494e704a4304642e99ef" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Array::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="1array.h" line="115" column="8" bodyfile="1array.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_array_1aec0d00cb7dcfbabb6196311e52844312" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int Array::arrayCount</definition>
        <argsstring></argsstring>
        <name>arrayCount</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Initialize static data member at file scope. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 ARRAY.CPP Member function definitions for class <ref refid="class_array" kindref="compound">Array</ref> </para>
<sect2 id="class_array_1autotoc_md0">
<title>Author:  Deitel/Deitel  (Additional comments by Olson and Zander)</title>
<para><ref refid="class_array" kindref="compound">Array</ref> class: like an int array (retains all functionality) but also includes additional features: <ndash/> allows input and output of the whole array <ndash/> allows for comparison of 2 arrays, element by element <ndash/> allows for assignment of 2 arrays <ndash/> size is part of the class (so no longer needs to be passed) <ndash/> includes range checking, program terminates for out-of-bound subscripts</para>
<para>Assumptions: <ndash/> size defaults to a fixed size of 10 if size is not specified <ndash/> array elements are initialized to zero <ndash/> user must enter valid integers when using &gt;&gt; </para>
</sect2>
<sect2 id="class_array_1autotoc_md1">
<title>â€“ in &lt;&lt;, integers are displayed 10 per line</title>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="1array.h" line="116" column="15" bodyfile="1array.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_array_1a533857db5ed0f67904824ff94d7617b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>istream &amp;</type>
        <definition>istream&amp; operator&gt;&gt;</definition>
        <argsstring>(istream &amp;, Array &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>istream &amp;</type>
          <defname>input</defname>
        </param>
        <param>
          <type><ref refid="class_array" kindref="compound">Array</ref> &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 operator&gt;&gt; Overloaded input operator for class <ref refid="class_array" kindref="compound">Array</ref>; inputs values for entire array. <simplesect kind="return"><para>returns input from istream </para>
</simplesect>
<simplesect kind="pre"><para>Preconditions: a.ptr must point to an array with size at least a.size </para>
</simplesect>
<simplesect kind="post"><para>Postconditions: The first a.size elements of a.ptr are filled with integers read from the input istream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="1array.h" line="35" column="16" bodyfile="1array.cpp" bodystart="155" bodyend="159"/>
      </memberdef>
      <memberdef kind="friend" id="class_array_1a43c7c4379f20a65d2d450c8f2f441ca9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;, const Array &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <defname>output</defname>
        </param>
        <param>
          <type>const <ref refid="class_array" kindref="compound">Array</ref> &amp;</type>
          <defname>a</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 operator&lt;&lt; Overloaded output operator for class <ref refid="class_array" kindref="compound">Array</ref> <simplesect kind="return"><para>returns output to ostream </para>
</simplesect>
<simplesect kind="pre"><para>Preconditions: a.ptr must point to an array with size at least a.size </para>
</simplesect>
<simplesect kind="post"><para>Postconditions: The first a.size elements of a.ptr are sent to the output istream 10 per line with a trailing endl </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="1array.h" line="43" column="8" bodyfile="1array.cpp" bodystart="168" bodyend="179"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_array_1ad8df7b9c3fc7f4c8acb83106b2d4c2f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Array::Array</definition>
        <argsstring>(int=10)</argsstring>
        <name>Array</name>
        <param>
          <type>int</type>
          <defname>arraySize</defname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Default constructor <simplesect kind="pre"><para>Preconditions: None </para>
</simplesect>
<simplesect kind="post"><para>Postconditions: ptr points to an array of size arraySize and all elements of the array have been initialized to zero. arrayCount is incremented Negative input values result in the default size of 10 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="1array.h" line="53" column="1" bodyfile="1array.cpp" bodystart="36" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1a92547f11ba0b2f9d83dd478a38dd06e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Array::Array</definition>
        <argsstring>(const Array &amp;)</argsstring>
        <name>Array</name>
        <param>
          <type>const <ref refid="class_array" kindref="compound">Array</ref> &amp;</type>
          <defname>init</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Copy constructor <simplesect kind="pre"><para>Preconditions: init.ptr points to an array of size at least init.size </para>
</simplesect>
<simplesect kind="post"><para>Postconditions: init is copied into *this, arrayCount is incremented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="1array.h" line="59" column="1" bodyfile="1array.cpp" bodystart="51" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1abcabe567f41f7798d2f97babcc443c6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Array::~Array</definition>
        <argsstring>()</argsstring>
        <name>~Array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Destructor <simplesect kind="pre"><para>Preconditions: ptr points to memory on the heap </para>
</simplesect>
<simplesect kind="post"><para>Postconditions: <ref refid="class_array" kindref="compound">Array</ref> for ptr is deallocated, arrayCount is decremented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="1array.h" line="65" column="1" bodyfile="1array.cpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1af29bf627de157570d00c700773884e20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Array::getSize</definition>
        <argsstring>() const</argsstring>
        <name>getSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 getSize returns the size of the array <simplesect kind="return"><para>getSize returns the size of the array </para>
</simplesect>
<simplesect kind="pre"><para>Preconditions: None </para>
</simplesect>
<simplesect kind="post"><para>Postconditions: Returns the size of the array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="1array.h" line="72" column="5" bodyfile="1array.cpp" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1a326711b256f5d18b8b7a82c33bfa4fca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_array" kindref="compound">Array</ref> &amp;</type>
        <definition>const Array &amp; Array::operator=</definition>
        <argsstring>(const Array &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_array" kindref="compound">Array</ref> &amp;</type>
          <defname>right</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 operator= Overwrites left parameter with right parameter <simplesect kind="return"><para>ptr of this </para>
</simplesect>
<simplesect kind="pre"><para>Preconditions: right.ptr points to an array of size at least right.size </para>
</simplesect>
<simplesect kind="post"><para>Postconditions: *this is assigned the same array as right </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="1array.h" line="79" column="13" bodyfile="1array.cpp" bodystart="84" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1ae22797e879a93defc81b7a422c5ebdf4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Array::operator==</definition>
        <argsstring>(const Array &amp;) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_array" kindref="compound">Array</ref> &amp;</type>
          <defname>right</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 operator== Determine if two arrays are equal. <simplesect kind="return"><para>boolean true or false depending on size </para>
</simplesect>
<simplesect kind="pre"><para>Preconditions: ptr and right.ptr point to arrays with size at least size and right.size, respectively </para>
</simplesect>
<simplesect kind="post"><para>Postconditions: true is returned if the arrays have the same size and elements false is return otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="1array.h" line="88" column="6" bodyfile="1array.cpp" bodystart="106" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1a8f9bf4df60147851da5d1d197c58305f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Array::operator!=</definition>
        <argsstring>(const Array &amp;) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_array" kindref="compound">Array</ref> &amp;</type>
          <defname>right</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 operator!= Determine if two arrays are not equal. <simplesect kind="return"><para>boolean true or false depending on size </para>
</simplesect>
<simplesect kind="pre"><para>Preconditions: ptr and right.ptr point to arrays with size at least size and right.size, respectively </para>
</simplesect>
<simplesect kind="post"><para>Postconditions: false is returned if the arrays have the same size and elements true is return otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="1array.h" line="97" column="6" bodyfile="1array.cpp" bodystart="124" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1a8d65c656861d973d987d744da1bfe3ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int &amp;</type>
        <definition>int &amp; Array::operator[]</definition>
        <argsstring>(int)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <defname>subscript</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 operator[] Overloaded subscript operator, terminates if subscript out of range error <simplesect kind="return"><para>returns ptr </para>
</simplesect>
<simplesect kind="pre"><para>Preconditions: 0 &lt;= subscript &lt; size </para>
</simplesect>
<simplesect kind="post"><para>Postconditions: Returns the array value at position &quot;subscript&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="1array.h" line="104" column="5" bodyfile="1array.cpp" bodystart="134" bodyend="137"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_array_1aabdedbfd0e0010baddca16efc41125ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Array::getArrayCount</definition>
        <argsstring>()</argsstring>
        <name>getArrayCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 getArrayCount Return the number of <ref refid="class_array" kindref="compound">Array</ref> objects instantiated <simplesect kind="return"><para>returns number of arrays in arrayCount </para>
</simplesect>
<simplesect kind="pre"><para>Preconditions: None </para>
</simplesect>
<simplesect kind="post"><para>Postconditions: Returns the number of arrays </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="1array.h" line="111" column="12" bodyfile="1array.cpp" bodystart="145" bodyend="145"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>Array</label>
        <link refid="class_array"/>
      </node>
    </collaborationgraph>
    <location file="1array.h" line="28" column="1" bodyfile="1array.h" bodystart="28" bodyend="117"/>
    <listofallmembers>
      <member refid="class_array_1ad8df7b9c3fc7f4c8acb83106b2d4c2f5" prot="public" virt="non-virtual"><scope>Array</scope><name>Array</name></member>
      <member refid="class_array_1a92547f11ba0b2f9d83dd478a38dd06e2" prot="public" virt="non-virtual"><scope>Array</scope><name>Array</name></member>
      <member refid="class_array_1aec0d00cb7dcfbabb6196311e52844312" prot="private" virt="non-virtual"><scope>Array</scope><name>arrayCount</name></member>
      <member refid="class_array_1aabdedbfd0e0010baddca16efc41125ec" prot="public" virt="non-virtual"><scope>Array</scope><name>getArrayCount</name></member>
      <member refid="class_array_1af29bf627de157570d00c700773884e20" prot="public" virt="non-virtual"><scope>Array</scope><name>getSize</name></member>
      <member refid="class_array_1a8f9bf4df60147851da5d1d197c58305f" prot="public" virt="non-virtual"><scope>Array</scope><name>operator!=</name></member>
      <member refid="class_array_1a43c7c4379f20a65d2d450c8f2f441ca9" prot="private" virt="non-virtual"><scope>Array</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_array_1a326711b256f5d18b8b7a82c33bfa4fca" prot="public" virt="non-virtual"><scope>Array</scope><name>operator=</name></member>
      <member refid="class_array_1ae22797e879a93defc81b7a422c5ebdf4" prot="public" virt="non-virtual"><scope>Array</scope><name>operator==</name></member>
      <member refid="class_array_1a533857db5ed0f67904824ff94d7617b9" prot="private" virt="non-virtual"><scope>Array</scope><name>operator&gt;&gt;</name></member>
      <member refid="class_array_1a8d65c656861d973d987d744da1bfe3ae" prot="public" virt="non-virtual"><scope>Array</scope><name>operator[]</name></member>
      <member refid="class_array_1aed1d2943c52e2503817744cbace2d805" prot="private" virt="non-virtual"><scope>Array</scope><name>ptr</name></member>
      <member refid="class_array_1a8780e83e6e49494e704a4304642e99ef" prot="private" virt="non-virtual"><scope>Array</scope><name>size</name></member>
      <member refid="class_array_1abcabe567f41f7798d2f97babcc443c6f" prot="public" virt="non-virtual"><scope>Array</scope><name>~Array</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
